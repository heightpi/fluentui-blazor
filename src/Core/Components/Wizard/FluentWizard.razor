@namespace Microsoft.FluentUI.AspNetCore.Components
@inherits FluentComponentBase

<CascadingValue Value="this">

    <div style="@StyleValue" class="@ClassValue">
        <div class="@(StepperPosition == StepperPosition.Top ? "fluent-wizard-top" : "fluent-wizard-left")"
             border-outside=@Border.HasFlag(WizardBorder.Outside)>
            <ol style=@GetStepperWidthOrHeight() 
                border-inside=@Border.HasFlag(WizardBorder.Inside)>
                @Steps
            </ol>

            <div class="fluent-wizard-content"
                 border-inside=@Border.HasFlag(WizardBorder.Inside)>
                @foreach (var step in _steps)
                {
                    <div style="@(step.Index == Value ? "" : "display: none;")">
                        @(step.ChildContent)
                    </div>
                }
            </div>

            <div class="fluent-wizard-buttons"
                 border-inside=@Border.HasFlag(WizardBorder.Inside)>
                @if (WizardButtons == null)
                {
                    string buttonWidth = "80px;";

                    @if (Value > 0)
                    {
                        <FluentButton Appearance="Appearance.Neutral" Width="@buttonWidth" OnClick="@OnPreviousHandlerAsync">
                            @LabelButtonPrevious
                        </FluentButton>
                    }

                    <span style="margin-right: 10px" />

                    @if (Value < _steps.Count - 1)
                    {
                        <FluentButton Appearance="Appearance.Accent" Width="@buttonWidth" OnClick="@OnNextHandlerAsync">
                            @LabelButtonNext
                        </FluentButton>
                    }
                    else
                    {
                        <FluentButton Appearance="Appearance.Accent" Width="@buttonWidth" OnClick="OnFinishHandlerAsync">
                            @LabelButtonDone
                        </FluentButton>
                    }
                }
                else
                {
                    @WizardButtons(Value)
                }
            </div>
        </div>
    </div>
</CascadingValue>